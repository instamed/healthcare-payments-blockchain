{
  "name": "healthcare-payments-blockchain-fhir-demo",
  "version": "0.2.0",
  "description": "Healthcare Payments in Blockchain FHIR Demo",
  "files": [
    "dist/*"
  ],
  "scripts": {
    "start": "npm run build && npm run env:restart && npm run cc:start",
    "start:debug": "npm run build && npm run env:restart && npm run cc:start:debug",
    "install": "npm-run-all -s lerna:install",
    "build": "node ./update-paths.js && npx lerna run build",
    "env:restart": "hurl new -o 3",
    "test": "npm-run-all -s lerna:test",
    "server:start": "npx lerna run start:dev --scope server --stream",
    "frontend:start": "npx lerna run serve --scope frontend --stream",
    "env:clean": "hurl clean",
    "cc:start": "f() { npm run cc:package; npm run cc:install; }; f",
    "cc:start:debug": "f() { npm run cc:package; npm run cc:install:debug; }; f",
    "cc:upgrade": "f() { npm run cc:package -- financial org1; hurl upgrade financial node $1  -P ./chaincode-financial --collections-config ./packages/administration/dev-env/defaultCollections.config.json -o org1 -o org2 -o org3; }; f",
    "user:fingerprint": "f () { node -e \"console.log(JSON.parse(require('fs').readFileSync('$1', 'utf8')).enrollment.identity.certificate)\" | openssl x509 -fingerprint -noout | cut -d '=' -f2 ; }; f",
    "cc:privateColPermutations": "node ./packages/administration/prod-env/getCollections.js",
    "===================INTERNALS===================": "===================NO NEED TO CALL THEM DIRECTLY===================",
    "lerna:install": "lerna bootstrap",
    "lerna:build": "lerna run build",
    "cc:package": "f() { npm run lerna:build; chaincode-manager --config ./chaincode.config.json --output ./chaincode-financial package; }; f",
    "cc:install": "f() { hurl install financial node -P ./chaincode-financial --collections-config ./packages/administration/dev-env/defaultCollections.config.json -o org1 -o org2 -o org3; }; f",
    "cc:install:debug": "f() { hurl install financial node -P ./chaincode-financial --collections-config ./packages/administration/dev-env/defaultCollections.config.json --debug -o org1 -o org2 -o org3; }; f",
    "lerna:test": "lerna exec npm run test",
    "views:install": "./packages/administration/dev-env/installer.sh",
    "mockData": "./packages/administration/dev-env/setup-mockdata.sh",
    "===================FORMA===================": "===================",
    "views:install:prod": "./packages/administration/prod-env/installer.sh"
  },
  "devDependencies": {
    "@worldsibu/convector-adapter-mock": "~1.3.8",
    "@worldsibu/convector-platform-fabric": "~1.3.8",
    "@worldsibu/convector-tool-chaincode-manager": "~1.3.8",
    "@worldsibu/hurley": "~1.1.3",
    "fabric-ca-client": "~1.4.0",
    "fabric-client": "~1.4.0",
    "lerna": "^6.4.1",
    "npm-run-all": "^4.1.5"
  }
}
